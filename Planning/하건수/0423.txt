- 사과 - 당도 외형 기반 추론 모델 탐색
- MASK R-CNN 모델 공부

### 📌 무엇을 하는 모델인가?

> 하나의 이미지에서 객체를 찾아내고,
> 
> 
> **그게 어떤 클래스인지 분류하고**,
> 
> **그 객체의 정확한 윤곽(픽셀 단위)을 마스크로 추출하는**
> 
> **다기능 딥러닝 모델**
> 
> ## 쉽게 설명하면
> 

> 한 장의 이미지에서:
> 
- 📦 사과의 **위치 (박스 좌표)**
- 🏷️ **등급 (A/B/C)**
- 🎭 **정확한 모양 (마스크)**
- 📊 **신뢰도 (얼마나 확신하는지)**
    
    → 를 **모두 한 번에 추출**합니다!
    

### 🔁 전체 흐름

```

[RGB 이미지 입력]
     ↓
1. Backbone (ResNet)         ← 이미지에서 특징 추출
     ↓
2. FPN (Feature Pyramid)     ← 다양한 크기 객체 인식 가능
     ↓
3. RPN (Region Proposal)     ← 사과 후보 위치(ROI) 제안
     ↓
4. ROI Align                 ← ROI를 고정 크기로 정렬
     ↓
5. Classifier Head           ← ROI의 클래스(A/B/C 등급 등) 분류
6. BBox Regressor            ← ROI 위치 보정
7. Mask Head                 ← 픽셀 단위 마스크 추출
     ↓
[출력: 등급 + 박스 좌표 + 마스크 + 신뢰도]

```

## 🧠 쉽게 설명한 Mask R-CNN 처리 과정

---

### 🎨 **[RGB 이미지 입력]**

> 마트에서 사과 사진 한 장을 찍는다고 생각하세요.
> 
> 
> 이 사진에는 여러 사과가 있을 수도 있어요.
> 

---

### 🔍 **1. Backbone (ResNet)** – "눈으로 전체 훑기"

> 모델이 이미지를 처음 보며 “여기 뭔가 중요한 게 있다”는 느낌을 잡아요.
> 
> 
> 색, 경계, 질감 같은 **기본 특징을 뽑는 뇌의 첫 반응**이라고 보면 됩니다.
> 
> 사과의 **색상, 광택, 윤곽, 질감 등**을 숫자 형태의 벡터로 표현
> 

---

### 🧱 **2. FPN (Feature Pyramid Network)** – "큰 것도, 작은 것도 다 보기"

> 크기 다른 사과도 놓치지 않게,
> 
> 
> **작은 사과부터 큰 사과까지** 다양한 사이즈를 다 볼 수 있도록 돕는 구조입니다.
> 

---

### 🕵️ **3. RPN (Region Proposal Network)** – "사과 후보 찾기"

> “여기 사과일 수도 있어!”, “저기도 뭔가 있어 보이네!”
> 
> 
> 이런 **사과처럼 생긴 후보 박스(ROI)**를 수천 개 뽑아냅니다.
> 

---

### ✂️ **4. ROI Align** – "잘라서 정렬"

> 후보 영역들을 모두 같은 크기로 잘라냅니다.
> 
> 
> 이유? → 다음 단계에서 공정하게 비교하기 위해서예요.
> 
> (작은 것도 크고, 큰 것도 작게 맞춰줌)
> 
> 단순 크기 조정이 아닌, **정확한 픽셀 위치 보존**이 핵심
> 

---

### 🧠 **5. Classifier Head** – "무슨 등급일까?"

> 자른 사과 조각을 보고 A등급? B등급? C등급? 판단합니다.
> 
> 
> 색, 균일도 등을 보고 당도 등급을 추측하죠.
> 

---

### 📏 **6. BBox(Bounding Box) Regressor** – "위치 살짝 보정"

> “아까 박스가 살짝 어긋났네…” →
> 
> 
> 사과 중심에 더 정확하게 맞추기 위해 **박스의 좌표를 미세하게 조정**합니다.
> 

---

### 🎭 **7. Mask Head** – "사과 모양 그리기"

> 마지막으로, 해당 ROI 안에 있는 사과의 **정확한 모양(픽셀 단위 경계)**을 그려줍니다.
> 
> 
> 경계가 흐릿하거나 찌그러진 것도 표현할 수 있어요.
> 
> “이 부분이 사과의 모양이다”를 픽셀 단위로 추출
> 

| 용어 | 비유 |
| --- | --- |
| **Backbone** | 카메라로 풍경을 스캔해서 특징을 뽑아냄 |
| **RPN** | 사람이 "저기 뭐가 있는 것 같아"라고 말하는 느낌 |
| **RoIAlign** | 그 영역을 확대해서 자세히 보기 좋게 맞추는 확대경 |
| **Classification** | 확대된 영역을 보고 "이건 A등급 사과야!" 라고 말함 |
| **Mask** | 손가락으로 사과 윤곽을 따라 그리는 것 |

---

---

---

---

## 📊 학습이란?

> CNN이 이미지(RGB 행렬)를 봤을 때, **정답(예: A등급)**과 다르면
> 
> 
> → 그 이유가 커널의 가중치 때문이니 **커널 값을 조금 바꿔서 더 잘 맞추게 하는 것**
> 

→ 이 과정을 수천 번 반복하며,

RGB를 받아 → CNN이 **“달콤해 보이는 패턴”**을 감지할 수 있게 됩니다.

## 📦 흐름 정리: RGB → 특징 추출 → 판단

```
[RGB 이미지]
   ↓
CNN 커널: 색/모양 등 패턴 감지 (가중치에 따라 달라짐)
   ↓
중간 특징맵: "붉고 둥글고 윤기 나는 사과" 같은 추상 패턴
   ↓
분류기(Dense): 이 특징을 조합해 → A/B/C 등급으로 판단

```

| 질문 | 답변 |
| --- | --- |
| RGB값이랑 CNN 커널이 무슨 상관? | 커널이 RGB값을 수학적으로 처리해 → 유의미한 특징을 추출 |
| RGB는 그냥 숫자잖아? | 맞아요, 근데 CNN은 이 숫자 속에서 “색상·형태·윤곽” 등의 **패턴을 인식** |
| 그럼 학습은 뭐야? | RGB를 잘 해석하게 커널의 가중치를 반복적으로 수정하는 과정 |